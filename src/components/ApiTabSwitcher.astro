---
import SyntaxHighlighter from "./SyntaxHighlighter.astro";
import CopyButton from "./CopyButton.astro";

interface Props {
  examples: {
    label: string;
    code: string;
  }[];
}

const { examples } = Astro.props;
---

<div
  class="bg-white h-fit min-h-full border-1 border-zinc-200 w-full divide-y divide-zinc-200 rounded-3xl shadow"
>
  <div class="flex justify-between items-center">
    <div
      class="m-3 p-1 bg-zinc-100 rounded-2xl gap-1 flex items-center overflow-x-auto whitespace-nowrap"
      id="api-tabs"
    >
      {
        examples.map((example, index) => (
          <button
            class={`px-3.5 py-3 rounded-xl transition-colors duration-300 ${
              index === 0
                ? "text-white bg-zinc-800"
                : "text-zinc-500 hover:bg-zinc-200"
            }`}
            data-tab-index={index}
          >
            {example.label}
          </button>
        ))
      }
    </div>
    <div id="copy-button-container">
      {
        examples.map((example, index) => (
          <div
            class={index === 0 ? "block" : "hidden"}
            data-copy-button={index}
          >
            <CopyButton code={example.code} className="text-zinc-500 mr-8" />
          </div>
        ))
      }
    </div>
  </div>
  <div class="p-6 text-sm" id="code-display">
    {
      examples.map((example, index) => (
        <div class={index === 0 ? "block" : "hidden"} data-tab-content={index}>
          <SyntaxHighlighter code={example.code} theme="light" />
        </div>
      ))
    }
  </div>
</div>

<script is:inline>
  if (typeof window !== "undefined") {
    function setupApiTabs() {
      const tabsContainer = document.getElementById("api-tabs");
      const codeDisplay = document.getElementById("code-display");
      const copyButtonContainer = document.getElementById(
        "copy-button-container"
      );

      if (!tabsContainer || !codeDisplay || !copyButtonContainer) {
        return;
      }

      function switchTab(targetIndex) {
        const buttons = tabsContainer.querySelectorAll("button");

        // Update tab button styles
        buttons.forEach(function (button, index) {
          if (index === targetIndex) {
            button.className =
              "px-3.5 py-3 rounded-xl text-white bg-zinc-800 transition-colors duration-300";
          } else {
            button.className =
              "px-3.5 py-3 rounded-xl text-zinc-500 hover:bg-zinc-200 transition-colors duration-300";
          }
        });

        // Update code display visibility
        const codeContents = codeDisplay.querySelectorAll("[data-tab-content]");
        codeContents.forEach(function (content, index) {
          if (index === targetIndex) {
            content.className = "block";
          } else {
            content.className = "hidden";
          }
        });

        // Update copy button visibility
        const copyButtons =
          copyButtonContainer.querySelectorAll("[data-copy-button]");
        copyButtons.forEach(function (button, index) {
          if (index === targetIndex) {
            button.className = "block";
          } else {
            button.className = "hidden";
          }
        });
      }

      // Add click event listeners to tabs
      tabsContainer.addEventListener("click", function (event) {
        const button = event.target.closest("button");
        if (!button) return;

        const tabIndex = parseInt(button.dataset.tabIndex);
        if (!isNaN(tabIndex)) {
          switchTab(tabIndex);
        }
      });
    }

    window.addEventListener("DOMContentLoaded", setupApiTabs);
  }
</script>
